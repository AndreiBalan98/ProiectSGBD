-- Crearea tabelului USERS
CREATE TABLE USERS (
    ID_USER NUMBER PRIMARY KEY,
    USERNAME VARCHAR2(50) UNIQUE NOT NULL,
    PASSWORD VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) UNIQUE NOT NULL,
    ROLE VARCHAR2(20) CHECK (ROLE IN ('admin', 'user')) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Crearea secvenței pentru USERS
CREATE SEQUENCE seq_users_id
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Crearea trigger-ului pentru auto-increment USERS
CREATE OR REPLACE TRIGGER trg_users_id
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    IF :NEW.ID_USER IS NULL THEN
        :NEW.ID_USER := seq_users_id.NEXTVAL;
    END IF;
END;
/

-- Crearea tabelului EVENTS
CREATE TABLE EVENTS (
    ID NUMBER PRIMARY KEY,
    TITLE VARCHAR2(200) NOT NULL,
    DESCRIPTION CLOB,
    DATE_EVENT TIMESTAMP NOT NULL,
    LOCATION VARCHAR2(200) NOT NULL,
    CAPACITY NUMBER NOT NULL,
    ORGANIZER_ID NUMBER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_events_organizer FOREIGN KEY (ORGANIZER_ID) REFERENCES USERS(ID_USER)
);

-- Crearea secvenței pentru EVENTS
CREATE SEQUENCE seq_events_id
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Crearea trigger-ului pentru auto-increment EVENTS
CREATE OR REPLACE TRIGGER trg_events_id
BEFORE INSERT ON EVENTS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := seq_events_id.NEXTVAL;
    END IF;
END;
/

-- Crearea tabelului REGISTRATIONS
CREATE TABLE REGISTRATIONS (
    ID NUMBER PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    EVENT_ID NUMBER NOT NULL,
    REGISTERED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_registrations_user FOREIGN KEY (USER_ID) REFERENCES USERS(ID_USER),
    CONSTRAINT fk_registrations_event FOREIGN KEY (EVENT_ID) REFERENCES EVENTS(ID),
    CONSTRAINT uk_user_event UNIQUE (USER_ID, EVENT_ID)
);

-- Crearea secvenței pentru REGISTRATIONS
CREATE SEQUENCE seq_registrations_id
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Crearea trigger-ului pentru auto-increment REGISTRATIONS
CREATE OR REPLACE TRIGGER trg_registrations_id
BEFORE INSERT ON REGISTRATIONS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := seq_registrations_id.NEXTVAL;
    END IF;
END;
/