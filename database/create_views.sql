-- VIEWS PENTRU RAPORTARE È˜I STATISTICI

-- 1. VIEW pentru evenimente complete cu toate detaliile
CREATE OR REPLACE VIEW V_EVENTS_COMPLETE AS
SELECT 
    e.ID,
    e.TITLE,
    e.DESCRIPTION,
    e.DATE_EVENT,
    e.STATUS,
    e.CAPACITY,
    e.CREATED_AT,
    c.NAME as CATEGORY_NAME,
    c.COLOR as CATEGORY_COLOR,
    v.NAME as VENUE_NAME,
    v.ADDRESS as VENUE_ADDRESS,
    v.CITY as VENUE_CITY,
    v.MAX_CAPACITY as VENUE_MAX_CAPACITY,
    u.USERNAME as ORGANIZER_NAME,
    u.EMAIL as ORGANIZER_EMAIL,
    NVL(reg.REGISTERED_COUNT, 0) as REGISTERED_COUNT,
    (e.CAPACITY - NVL(reg.REGISTERED_COUNT, 0)) as AVAILABLE_SPOTS,
    ROUND((NVL(reg.REGISTERED_COUNT, 0) / e.CAPACITY) * 100, 2) as OCCUPANCY_RATE
FROM EVENTS e
LEFT JOIN CATEGORIES c ON e.CATEGORY_ID = c.ID
LEFT JOIN VENUES v ON e.VENUE_ID = v.ID
JOIN USERS u ON e.ORGANIZER_ID = u.ID_USER
LEFT JOIN (
    SELECT EVENT_ID, COUNT(*) as REGISTERED_COUNT
    FROM REGISTRATIONS 
    GROUP BY EVENT_ID
) reg ON e.ID = reg.EVENT_ID;

-- 2. VIEW pentru statistici evenimente pe categorii
CREATE OR REPLACE VIEW V_CATEGORY_STATS AS
SELECT 
    c.ID,
    c.NAME as CATEGORY_NAME,
    c.COLOR,
    COUNT(e.ID) as TOTAL_EVENTS,
    COUNT(CASE WHEN e.STATUS = 'published' THEN 1 END) as PUBLISHED_EVENTS,
    COUNT(CASE WHEN e.STATUS = 'draft' THEN 1 END) as DRAFT_EVENTS,
    COUNT(CASE WHEN e.STATUS = 'cancelled' THEN 1 END) as CANCELLED_EVENTS,
    NVL(SUM(reg.REGISTERED_COUNT), 0) as TOTAL_REGISTRATIONS,
    NVL(AVG(reg.REGISTERED_COUNT), 0) as AVG_REGISTRATIONS_PER_EVENT
FROM CATEGORIES c
LEFT JOIN EVENTS e ON c.ID = e.CATEGORY_ID
LEFT JOIN (
    SELECT EVENT_ID, COUNT(*) as REGISTERED_COUNT
    FROM REGISTRATIONS 
    GROUP BY EVENT_ID
) reg ON e.ID = reg.EVENT_ID
GROUP BY c.ID, c.NAME, c.COLOR
ORDER BY TOTAL_EVENTS DESC;

-- 3. VIEW pentru activitatea utilizatorilor
CREATE OR REPLACE VIEW V_USER_ACTIVITY AS
SELECT 
    u.ID_USER,
    u.USERNAME,
    u.EMAIL,
    u.ROLE,
    u.DATA_NASTERII,
    CASE 
        WHEN u.DATA_NASTERII IS NOT NULL 
        THEN FLOOR(MONTHS_BETWEEN(SYSDATE, u.DATA_NASTERII) / 12)
        ELSE NULL 
    END as AGE,
    COUNT(r.ID) as TOTAL_REGISTRATIONS,
    COUNT(CASE WHEN e.DATE_EVENT > SYSDATE THEN 1 END) as UPCOMING_EVENTS,
    COUNT(CASE WHEN e.DATE_EVENT <= SYSDATE THEN 1 END) as PAST_EVENTS,
    MAX(r.REGISTERED_AT) as LAST_REGISTRATION
FROM USERS u
LEFT JOIN REGISTRATIONS r ON u.ID_USER = r.USER_ID
LEFT JOIN EVENTS e ON r.EVENT_ID = e.ID
WHERE u.ROLE = 'user'
GROUP BY u.ID_USER, u.USERNAME, u.EMAIL, u.ROLE, u.DATA_NASTERII
ORDER BY TOTAL_REGISTRATIONS DESC;

-- 4. VIEW pentru evenimente populare
CREATE OR REPLACE VIEW V_POPULAR_EVENTS AS
SELECT 
    e.ID,
    e.TITLE,
    e.DATE_EVENT,
    e.STATUS,
    c.NAME as CATEGORY_NAME,
    v.NAME as VENUE_NAME,
    e.CAPACITY,
    NVL(reg.REGISTERED_COUNT, 0) as REGISTERED_COUNT,
    ROUND((NVL(reg.REGISTERED_COUNT, 0) / e.CAPACITY) * 100, 2) as OCCUPANCY_RATE,
    CASE 
        WHEN NVL(reg.REGISTERED_COUNT, 0) >= e.CAPACITY THEN 'SOLD_OUT'
        WHEN (NVL(reg.REGISTERED_COUNT, 0) / e.CAPACITY) >= 0.8 THEN 'ALMOST_FULL'
        WHEN (NVL(reg.REGISTERED_COUNT, 0) / e.CAPACITY) >= 0.5 THEN 'HALF_FULL'
        ELSE 'AVAILABLE'
    END as STATUS_LABEL
FROM EVENTS e
LEFT JOIN CATEGORIES c ON e.CATEGORY_ID = c.ID
LEFT JOIN VENUES v ON e.VENUE_ID = v.ID
LEFT JOIN (
    SELECT EVENT_ID, COUNT(*) as REGISTERED_COUNT
    FROM REGISTRATIONS 
    GROUP BY EVENT_ID
) reg ON e.ID = reg.EVENT_ID
WHERE e.STATUS = 'published'
ORDER BY OCCUPANCY_RATE DESC, REGISTERED_COUNT DESC;

-- 5. VIEW pentru evenimente viitoare
CREATE OR REPLACE VIEW V_UPCOMING_EVENTS AS
SELECT 
    e.ID,
    e.TITLE,
    e.DESCRIPTION,
    e.DATE_EVENT,
    c.NAME as CATEGORY_NAME,
    c.COLOR as CATEGORY_COLOR,
    v.NAME as VENUE_NAME,
    v.ADDRESS as VENUE_ADDRESS,
    u.USERNAME as ORGANIZER_NAME,
    e.CAPACITY,
    NVL(reg.REGISTERED_COUNT, 0) as REGISTERED_COUNT,
    (e.CAPACITY - NVL(reg.REGISTERED_COUNT, 0)) as AVAILABLE_SPOTS,
    ROUND(EXTRACT(DAY FROM (e.DATE_EVENT - SYSDATE))) as DAYS_UNTIL_EVENT
FROM EVENTS e
JOIN CATEGORIES c ON e.CATEGORY_ID = c.ID
JOIN VENUES v ON e.VENUE_ID = v.ID
JOIN USERS u ON e.ORGANIZER_ID = u.ID_USER
LEFT JOIN (
    SELECT EVENT_ID, COUNT(*) as REGISTERED_COUNT
    FROM REGISTRATIONS 
    GROUP BY EVENT_ID
) reg ON e.ID = reg.EVENT_ID
WHERE e.DATE_EVENT > SYSDATE 
  AND e.STATUS = 'published'
ORDER BY e.DATE_EVENT ASC;